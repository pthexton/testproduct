name: Pull Request Bot

on:
  pull_request:
    branches: [main]
  issue_comment:
    types: [created]

jobs:
  prbot:
    name: Automation Options
    runs-on: self-hosted

    steps:
      # - name: Get PR Info
      #   id: pr_info
      #   run: |
      #     echo "::set-output name=number::$(jq '.pull_request.number' ${GITHUB_EVENT_PATH})"
      #     echo "::set-output name=body::$(jq '.pull_request.body' ${GITHUB_EVENT_PATH})"
      - uses: actions/checkout@v2
      - name: event
        run: cat "${GITHUB_EVENT_PATH}"
      - name: Update automation branch
        if: contains(github.event.comment.html_url, '/pull/') && startsWith(github.event.comment.body, '!auto branch')
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          set -x
          # Will be overridden if we find a previously changed value in the PR description body
          branch="main"

          echo "GitHub Context ="
          jq <<< "${GITHUB_CONTEXT}"

          current_body=$(jq '.pull_request.body' ${GITHUB_EVENT_PATH})

          command="${{ github.event.comment.body }}"
          new_branch=$(basename "${command//" "/\/}")
          new_body_lines=()

          while IFS= read -r line; do
              if [[ "${line}" == "##### Automation branch:"* ]]; then
                new_body_lines+=("Automation branch: ${new_branch}")
              else
                new_body_lines+=("${line}")
              fi
          done <<< "${current_body}"

          printf -v body "%s\n" "${new_body_lines[@]}"

          ./octokit.sh update_pull_request ${repo} ${pr_number} body="${body}"

      - uses: actions/checkout@v2
        with:
          repository: "pthexton/testproduct-automation"
          ref: "${{ steps.automation.outputs.branch }}"
          path: ./testproduct-automation
      - name: Create PR Description
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ github.event_name == 'pull_request' && github.event.action == 'opened' }}
        run: |
          readonly automation_hosts=("macOS Mojave" "macOS Catalina" "macOS Big Sur" "macOS Beta")
          # Helper for markdown checkboxes
          on_off() {
              case $1 in
              "[x]")
                  echo true
                  return 0
              esac
              echo false
              return 1
          }

          # TODO: The data we're getting from the event_path file, can we access
          # instead via ${{ github.pull_request.blah }} etc?
          repo=$(jq -r '.repository.full_name' ${GITHUB_EVENT_PATH})
          current_body=$(jq -r '.pull_request.body' ${GITHUB_EVENT_PATH})
          pr_number=$(jq -r '.pull_request.number' ${GITHUB_EVENT_PATH})

          new_body_lines=()

          state="description"

          while IFS= read -r line; do
              if [[ "${line}" == "#### Automation Settings"* ]]; then
                  # We're going to rebuild the automation settings
                  break
              fi
              new_body_lines+=("${line}")
          done <<< "${current_body}"

          new_body_lines+=("#### Automation Settings")
          new_body_lines+=("##### Automation branch: master")
          new_body_lines+=("##### Features")

          pushd testproduct-automation
          for feature in features/*.feature; do
            new_body_lines+=("- [x] ${feature}")
          done
          popd

          new_body_lines+=("##### Hosts")

          for host in "${automation_hosts[@]}"; do
            new_body_lines+=("- [x] ${host}")
          done

          printf -v body "%s\n" "${new_body_lines[@]}"

          ./octokit.sh update_pull_request ${repo} ${pr_number} body="${body}"
