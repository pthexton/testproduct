name: Pull Request Bot

on:
  pull_request:
    branches: [main]
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  prbot-run-automation:
    name: Run Automation
    if: contains(github.event.comment.html_url, '/pull/') && startsWith(github.event.comment.body, '!auto run')
    runs-on: self-hosted
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "${GITHUB_CONTEXT}"
      - uses: actions/checkout@v2
      - name: Get selected automation branch name
        id: automation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          BODY: ${{ github.event.issue.body }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          branch="unknown"

          while IFS= read -r line; do
            if [[ "${line}" == "##### Automation branch:"* ]]; then
              branch=$(awk '{print $NF}' <<< "${line}")
              echo "::set-output name=branch::${branch}"
            fi
          done <<< "${BODY}"

          if [[ "${branch}" == "unknown" ]]; then
            ./octokit.sh add_comment ${REPO} ${PR_NUMBER} "Unable to determine automation branch, cannot run integration tests"
            exit 1
          fi
      - name: Ensure automation branch exists
        uses: actions/checkout@v2
        with:
          repository: "pthexton/testproduct-automation"
          ref: "${{ steps.automation.outputs.branch }}"
          path: ./testproduct-automation
      - name: Do the run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          BODY: ${{ github.event.issue.body }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          # Helper to determine whether a markdown checkbox is enabled
          on_off() {
            case $1 in
              "[x]")
                echo true
                return 0
            esac
            echo false
            return 1
          }

          set -x

          build_details_url=$(jq -r '.statusCheckRollup[] |
            select(.name=="build") |
            .detailsUrl' \
            <<< "$(gh pr view ${PR_NUMBER} --json statusCheckRollup)")
          echo "Got build details url ${build_details_url}"
          run_number=$(basename "${build_details_url}")
          echo "Got run number ${run_number}"
          run_id=$(jq '.run_id' <<< "$(gh api repos/${REPO}/actions/jobs/${run_number})")
          echo "Got run_id ${run_id}"

          enabled_features=()
          enabled_hosts=()

          state="description"
          while IFS= read -r line; do
            read -r -a tokens <<< "${line//"[ ]"/[]}"

            if [[ "${line}" != "##"* ]]; then
              case $state in
                "features")
                  if $(on_off "${tokens[1]}"); then
                    enabled_features+=("${tokens[@]:2}")
                  fi
                  ;;
                "hosts")
                  if $(on_off "${tokens[1]}"); then
                    enabled_hosts+=("${tokens[@]:2}")
                  fi
                  ;;
              esac
            fi

            case $line in
              "##### Features")
                state="features"
                ;;
              "##### Hosts")
                state="hosts"
                ;;
            esac
          done <<< "${BODY}"

          new_comment=()
          new_comment+=("When fully implemented this bot will run automation with the following configuration")
          new_comment+=("Download the PR build with run_id ${run_id}, determined from the workflow id ${run_number}")
          new_comment+=("Trigger the automation workflow with the following Settings")
          new_comment+=("Enabled features")
          new_comment+=(${enabled_features[@]})
          new_comment+=("Enabled Hosts")
          new_comment+=(${enabled_hosts[@]})

          printf -v comment "%s\n" "${new_comment[@]}"

          ./octokit.sh add_comment ${REPO} ${PR_NUMBER} "${comment}"

  prbot-switch-branch:
    name: PRBot Switch Branch
    if: contains(github.event.comment.html_url, '/pull/') && startsWith(github.event.comment.body, '!auto branch')
    runs-on: self-hosted
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/checkout@v2
      - name: Update automation branch
        id: automation
        env:
          BODY: ${{ github.event.comment.body }}
        run: |
          echo "::set-output name=branch::$(awk '{print $NF}' <<< "${BODY}")"
      - uses: actions/checkout@v2
        with:
          repository: "pthexton/testproduct-automation"
          ref: "${{ steps.automation.outputs.branch }}"
          path: ./testproduct-automation
      - name: Update PR Description
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          BODY: ${{ github.event.issue.body }}
          PR_NUMBER: ${{ github.event.issue.number }}
          BRANCH: ${{ steps.automation.outputs.branch }}
        run: |
          set -e
          # TODO: Find out if this can be a template yaml like in AzDO with template parameters
          # for the branch name, PR body, and PR number
          readonly automation_hosts=("macOS Mojave" "macOS Catalina" "macOS Big Sur" "macOS Beta")

          new_body_lines=()

          state="description"

          while IFS= read -r line; do
              if [[ "${line}" == "#### Automation Settings"* ]]; then
                  # We're going to rebuild the automation settings
                  break
              fi
              new_body_lines+=("${line}")
          done <<< "${current_body}"

          new_body_lines+=("#### Automation Settings")
          new_body_lines+=("##### Automation branch: ${BRANCH}")
          new_body_lines+=("##### Features")

          pushd testproduct-automation
          for feature in features/*.feature; do
            new_body_lines+=("- [x] ${feature}")
          done
          popd

          new_body_lines+=("##### Hosts")

          for host in "${automation_hosts[@]}"; do
            new_body_lines+=("- [x] ${host}")
          done

          printf -v body "%s\n" "${new_body_lines[@]}"

          ./octokit.sh update_pull_request ${REPO} ${PR_NUMBER} body="${body}"
          ./octokit.sh add_comment ${REPO} ${PR_NUMBER} "Switched to branch ${BRANCH}\nComment with:\n> !auto run\n\nto start an automation run"
  prbot-new_pr:
    name: Setup Automation Options
    runs-on: self-hosted
    if: ${{ github.event_name == 'pull_request' && github.event.action == 'opened' }}
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/checkout@v2
      - name: event
        run: cat "${GITHUB_EVENT_PATH}"
      - uses: actions/checkout@v2
        with:
          repository: "pthexton/testproduct-automation"
          ref: "main"
          path: ./testproduct-automation
      - name: Create PR Description
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          BODY: ${{ github.event.pull_request.body }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          set -x
          # TODO: Find out if this can be a template yaml like in AzDO with template parameters
          # for the branch name, PR body, and PR number
          readonly automation_hosts=("macOS Mojave" "macOS Catalina" "macOS Big Sur" "macOS Beta")

          new_body_lines=()

          state="description"

          while IFS= read -r line; do
              if [[ "${line}" == "#### Automation Settings"* ]]; then
                  # We're going to rebuild the automation settings
                  break
              fi
              new_body_lines+=("${line}")
          done <<< "${BODY}"

          new_body_lines+=("#### Automation Settings")
          new_body_lines+=("Change the selections with the tickboxes to run the most appropriate system integration tests for this PR build")
          new_body_lines+=("To switch the automation branch used add a comment as follows")
          new_body_lines+=("> !auto branch ref/spec\n")
          new_body_lines+=("To start an automation run with the selected settings, add a comment as follows")
          new_body_lines+=("> !auto run\n")
          new_body_lines+=("##### Automation branch: main")
          new_body_lines+=("##### Features")

          pushd testproduct-automation
            for feature in features/*.feature; do
              new_body_lines+=("- [x] ${feature}")
            done
          popd

          new_body_lines+=("##### Hosts")

          for host in "${automation_hosts[@]}"; do
            new_body_lines+=("- [x] ${host}")
          done

          printf -v body "%s\n" "${new_body_lines[@]}"

          ./octokit.sh update_pull_request ${REPO} ${PR_NUMBER} body="${body}"
